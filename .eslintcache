[{"C:\\Users\\olafu\\Documents\\midium\\src\\index.js":"1","C:\\Users\\olafu\\Documents\\midium\\src\\components\\App\\index.js":"2","C:\\Users\\olafu\\Documents\\midium\\src\\views\\PracticeOverview\\index.js":"3","C:\\Users\\olafu\\Documents\\midium\\src\\views\\PracticeNotes\\index.js":"4","C:\\Users\\olafu\\Documents\\midium\\src\\services\\midiService.js":"5","C:\\Users\\olafu\\Documents\\midium\\src\\services\\Practice.js":"6","C:\\Users\\olafu\\Documents\\midium\\src\\Common.js":"7","C:\\Users\\olafu\\Documents\\midium\\src\\views\\PracticeKeys\\index.js":"8","C:\\Users\\olafu\\Documents\\midium\\src\\views\\PracticeNoteDegrees\\index.js":"9"},{"size":637,"mtime":1608415389123,"results":"10","hashOfConfig":"11"},{"size":676,"mtime":1609424569893,"results":"12","hashOfConfig":"11"},{"size":860,"mtime":1609424621372,"results":"13","hashOfConfig":"11"},{"size":2309,"mtime":1609422724111,"results":"14","hashOfConfig":"11"},{"size":4972,"mtime":1609368033121,"results":"15","hashOfConfig":"11"},{"size":4655,"mtime":1609365630327,"results":"16","hashOfConfig":"11"},{"size":2526,"mtime":1609431574964,"results":"17","hashOfConfig":"11"},{"size":3381,"mtime":1609431615010,"results":"18","hashOfConfig":"11"},{"size":3665,"mtime":1609432788651,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1wwc3bd",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\olafu\\Documents\\midium\\src\\index.js",[],["40","41","42","43","44","45"],"C:\\Users\\olafu\\Documents\\midium\\src\\components\\App\\index.js",[],"C:\\Users\\olafu\\Documents\\midium\\src\\views\\PracticeOverview\\index.js",[],"C:\\Users\\olafu\\Documents\\midium\\src\\views\\PracticeNotes\\index.js",[],"C:\\Users\\olafu\\Documents\\midium\\src\\services\\midiService.js",["46","47","48","49","50"],"import Common from '../Common';\n\n/* Global values */\nconst EVENT_TYPE = 0;\nconst NOTE_VALUE = 1;\nconst NOTE_VELOCITY = 2;\nconst NOTE_ON = 144;\nconst NOTE_OFF = 128;\nconst KEYBOARD_ON = true;\nlet midiAccessed = false;\nlet keyOnEventHandler = null;\nlet keyOffEventHandler = null;\nlet shiftDown = false;\n\n/**\n * Returns true if midi operations are enabled on this browser, false otherwise\n *\n * @return {Boolean} true or false depending on whether midi is enabled or not\n */\nconst isMidiSupported = () => Boolean(navigator.requestMIDIAccess);\n\nconst getNoteName = (noteValue) => {\n  const notes = Common.getAllNotes();\n  const noteIndex = noteValue % notes.length;\n  const noteName = notes[noteIndex];\n  const noteNumber = Math.floor((noteValue - 24) / notes.length) + 1;\n  return `${noteName}${noteNumber}`;\n};\n\n/**\n * The function that is run whenever the user presses a key on their MIDI\n * keyboard\n *\n * @param {Event} e An object that represents the fired event\n */\nconst onMidiMessage = (e) => {\n  const keyOn = e.data[EVENT_TYPE] === NOTE_ON;\n  const keyOff = e.data[EVENT_TYPE] === NOTE_OFF;\n  const onHandlerExists = keyOnEventHandler != null;\n  const offHandlerExists = keyOffEventHandler != null;\n  const noteName = getNoteName(e.data[NOTE_VALUE]);\n  const velocity = e.data[NOTE_VELOCITY];\n\n  if (keyOn && onHandlerExists) keyOnEventHandler(noteName, velocity);\n  else if (keyOff && offHandlerExists) keyOffEventHandler(noteName, velocity);\n};\n\n/**\n * Returns 'true' if the given key name is a valid note name ('a'-'g')\n *\n * @param {String} keyName The name of the key that was pressed/released\n * @return {Boolean} is the given key name a valid note name?\n */\nconst isValidKeyboardNote = (keyName) => {\n  const validKeys = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n  return validKeys.includes(keyName.toLowerCase());\n};\n\n/**\n * The function that is run whenever the user presses a key on their keyboard\n *\n * @param {KeyboardEvent} e An object that represents the fired event\n */\nconst onKeyboardMessage = (e) => {\n  const keyOn = e.type === 'keydown';\n  const keyOff = e.type === 'keyup';\n  if (e.key.toLowerCase() === 'shift') {\n    shiftDown = keyOn;\n  }\n\n  // don't continue if pressed key does not contain a valid note\n  if (!isValidKeyboardNote(e.key)) { return; }\n  const onHandlerExists = keyOnEventHandler != null;\n  const offHandlerExists = keyOffEventHandler != null;\n  const velocity = Math.floor(127 / 2); // mid-velocity\n\n  // get note's name\n  const addSharp = shiftDown && !['B', 'E'].includes(e.key.toUpperCase());\n  const noteName = `${e.key.toUpperCase()}${addSharp ? '#' : ''}*`;\n\n  if (keyOn && onHandlerExists) keyOnEventHandler(noteName, velocity);\n  else if (keyOff && offHandlerExists) keyOffEventHandler(noteName, velocity);\n};\n\n/**\n * Requests access to MIDI devices\n */\nconst requestMidiAccess = async () => {\n  let midiAccess = null;\n\n  // add keyboard events too if that setting is turned on\n  if (KEYBOARD_ON) {\n    window.addEventListener('keydown', onKeyboardMessage);\n    window.addEventListener('keyup', onKeyboardMessage);\n  }\n\n  // request MIDI access and handle errors\n  try {\n    midiAccess = await navigator.requestMIDIAccess({ sysex: false });\n  } catch (err) {\n    console.log('Error while requesting midi access:', err.message);\n    return;\n  }\n\n  // check if there are any devices available\n  console.log('Requesting MIDI access was a success');\n  const devicesAvailable = midiAccess.inputs.size > 0;\n  if (!devicesAvailable) { console.log('no MIDI devices available'); return; }\n\n  // Yay! We found MIDI devices\n  midiAccess.inputs.forEach((key) => {\n    if (midiAccessed) { return; }\n    midiAccessed = true;\n    console.log('listening to device:', key.name);\n\n    const modKey = key;\n    modKey.onmidimessage = onMidiMessage;\n  });\n};\n\n/**\n * Sets 'handler' as the current event handler that runs whenever a key on the\n * midi keyboard is pressed down\n *\n * @param {Function} handler The new key event handler\n */\nexport const addKeyOnListener = async (handler) => {\n  if (!isMidiSupported()) { console.error('MIDI not supported!'); return; }\n  if (!midiAccessed) { await requestMidiAccess(); }\n\n  // set the given function as the key event listener\n  keyOnEventHandler = handler;\n};\n\n/**\n * Sets 'handler' as the current event handler that runs whenever a key on the\n * midi keyboard is released\n *\n * @param {Function} handler The new key event handler\n */\nexport const addKeyOffListener = async (handler) => {\n  if (!isMidiSupported()) { return; }\n  if (!midiAccessed) { await requestMidiAccess(); }\n\n  // set the given function as the key event listener\n  keyOffEventHandler = handler;\n};\n\n/**\n * Removes the current key on event listener, important for clean-up purposes\n */\nexport const removeKeyOnListener = () => {\n  keyOnEventHandler = null;\n};\n\n/**\n * Removes the current key off event listener, important for clean-up purposes\n */\nexport const removeKeyOffListener = () => {\n  keyOffEventHandler = null;\n};\n","C:\\Users\\olafu\\Documents\\midium\\src\\services\\Practice.js",[],"C:\\Users\\olafu\\Documents\\midium\\src\\Common.js",[],"C:\\Users\\olafu\\Documents\\midium\\src\\views\\PracticeKeys\\index.js",["51"],"C:\\Users\\olafu\\Documents\\midium\\src\\views\\PracticeNoteDegrees\\index.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":101,"column":5,"nodeType":"66","messageId":"67","endLine":101,"endColumn":16},{"ruleId":"64","severity":1,"message":"65","line":106,"column":3,"nodeType":"66","messageId":"67","endLine":106,"endColumn":14},{"ruleId":"64","severity":1,"message":"65","line":108,"column":28,"nodeType":"66","messageId":"67","endLine":108,"endColumn":39},{"ruleId":"64","severity":1,"message":"65","line":114,"column":5,"nodeType":"66","messageId":"67","endLine":114,"endColumn":16},{"ruleId":"64","severity":1,"message":"65","line":128,"column":29,"nodeType":"66","messageId":"67","endLine":128,"endColumn":42},{"ruleId":"64","severity":1,"message":"65","line":50,"column":5,"nodeType":"66","messageId":"67","endLine":50,"endColumn":16},"lines-around-directive",["68"],"no-spaced-func",["69"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements","func-call-spacing"]